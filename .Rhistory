#Thursday class
library(dplyr)
library(ggplot2)
data <- read.csv("fielddata.csv")
data <- data[1:20, 1:2]
data <- rename(data, holes = Number.of.holes.per.radish.leaf)
data$holes <- as.numeric(data$holes)
ggplot(data, aes(holes)) + geom_histogram(bins = 6)
#equation for poisson regression
pos <- function(x, a, b){exp(a+b*x)}
loglikpos <- function(df, lambda){
ll <- sum(dpois(df, lambda, log = TRUE))
sum(ll)
}
holes <- data$holes
seq.lamb <- seq(1, 100, by = 0.01)
list.lik <- list()
list.lamb <-list()
for (i in 1:length(seq.lamb)){
a <- seq.lamb[i]
lik <- loglikpos(holes, a)
list.lik[[i]] <- lik
list.lamb[[i]] <- a
}
lik <- do.call(rbind, list.lik)
lamb <- do.call(rbind, list.lamb)
results <-  cbind(lik, lamb)
results <- as.data.frame(results)
results <-  results %>% rename(ll = V1, lambda = V2)
max(results$ll)
max <- results[which.max(results$ll),]
#have lambda not sure how to predict
hist(holes)
curve(dpois(x, max[1,2]), xlim = c(0, 100), add = TRUE)
#lol
curve(dpois(x, max[1,2])*100, xlim = c(0, 100), add = TRUE)
m1 <- glm(holes ~ 1, family = poisson(link = identity))
summary(m1)
#liklihood profile
plot(results$lambda, results$ll)
# Candidate function
c_x <- function(pars_lo, pars_hi) runif(1, pars_lo, pars_hi)
# Set conditions for the simulated annealing sequence
T_fn <- function(T0, alpha, step) T0*exp(alpha*step)
T0 <- 10
alpha = -0.001
nsteps <- 1000
# Prepare an object to store the result
res <- matrix(nr = nsteps, nc = 1)
# Initiate the algorithm
a0 <- 1
s0 <- 1000
sd0 <- 10
#starting values and bounds for lamda
pars0 <- 1
pars_lo <- 0
pars_hi <- 100
# Main loop
for(step in 1:nsteps) {
# Draw new value for parameter j
#pars1 <- pars0
pars1 <- c_x(pars_lo, pars_hi)
# Evaluate the function
h1 <- loglikpos(pars1)
h0 <- loglikpos(pars0)
# Compute the difference
diff <- h1 - h0
# Accept if improvement
if(diff > 0) pars0 <- pars1
# Accept wrong candidates
else {
p <- exp(diff/T_fn(T0, alpha, step))
if(runif(1)<p) pars0 <- pars1
}
# Record values
res[step,] <- c(step,pars0,loglikpos(pars0))
}
# Draw new value for parameter j
#pars1 <- pars0
pars1 <- c_x(pars_lo, pars_hi)
# Evaluate the function
h1 <- loglikpos(holes, pars1)
h0 <- loglikpos(holes,pars0)
# Compute the difference
diff <- h1 - h0
# Accept if improvement
if(diff > 0) pars0 <- pars1
# Record values
res[step,] <- c(step,pars0,loglikpos(pars0))
# Record values
res[step,] <- c(step,pars0,loglikpos(hole, pars0))
# Record values
res[step,] <- c(step,pars0,loglikpos(holes, pars0))
# Prepare an object to store the result
res <- matrix(nr = nsteps, nc = 3)
# Record values
res[step,] <- c(step,pars0,loglikpos(holes, pars0))
View(res)
#Plot the results
plot(c(1:nsteps), res[,5], type = "l", xlab = "Time step", ylab = "h(x)",cex = 2, log = "x")
# Main loop
for(step in 1:nsteps) {
# Draw new value for parameter j
#pars1 <- pars0
pars1 <- c_x(pars_lo, pars_hi)
# Evaluate the function
h1 <- loglikpos(holes, pars1)
h0 <- loglikpos(holes,pars0)
# Compute the difference
diff <- h1 - h0
# Accept if improvement
if(diff > 0) pars0 <- pars1
# Accept wrong candidates
else {
p <- exp(diff/T_fn(T0, alpha, step))
if(runif(1)<p) pars0 <- pars1
}
# Record values
res[step,] <- c(step,pars0,loglikpos(holes, pars0))
}
View(res)
#Plot the results
plot(c(1:nsteps), res[,3], type = "l", xlab = "Time step", ylab = "h(x)",cex = 2, log = "x")
nsteps <- 10000
# Main loop
for(step in 1:nsteps) {
# Draw new value for parameter j
#pars1 <- pars0
pars1 <- c_x(pars_lo, pars_hi)
# Evaluate the function
h1 <- loglikpos(holes, pars1)
h0 <- loglikpos(holes,pars0)
# Compute the difference
diff <- h1 - h0
# Accept if improvement
if(diff > 0) pars0 <- pars1
# Accept wrong candidates
else {
p <- exp(diff/T_fn(T0, alpha, step))
if(runif(1)<p) pars0 <- pars1
}
# Record values
res[step,] <- c(step,pars0,loglikpos(holes, pars0))
}
# Prepare an object to store the result
res <- matrix(nr = nsteps, nc = 3)
# Initiate the algorithm
a0 <- 1
s0 <- 1000
sd0 <- 10
#starting values and bounds for lamda
pars0 <- 1
pars_lo <- 0
pars_hi <- 100
# Main loop
for(step in 1:nsteps) {
# Draw new value for parameter j
#pars1 <- pars0
pars1 <- c_x(pars_lo, pars_hi)
# Evaluate the function
h1 <- loglikpos(holes, pars1)
h0 <- loglikpos(holes,pars0)
# Compute the difference
diff <- h1 - h0
# Accept if improvement
if(diff > 0) pars0 <- pars1
# Accept wrong candidates
else {
p <- exp(diff/T_fn(T0, alpha, step))
if(runif(1)<p) pars0 <- pars1
}
# Record values
res[step,] <- c(step,pars0,loglikpos(holes, pars0))
}
#Plot the results
plot(c(1:nsteps), res[,3], type = "l", xlab = "Time step", ylab = "h(x)",cex = 2, log = "x")
#Plot the lambda resuls
plot(c(1:nsteps), res[,2], type = "l", xlab = "Time step", ylab = "h(x)",cex = 2, log = "x")
#Plot the lambda resuls
plot(c(1:nsteps), res[,2], type = "l", xlab = "Time step", ylab = "lambda estimate",cex = 2, log = "x")
#Plot the liklihood results
plot(c(1:nsteps), res[,3], type = "l", xlab = "Time step", ylab = "h(x)",cex = 2, log = "x")
#Plot the lambda resuls
plot(c(1:nsteps), res[,2], type = "l", xlab = "Time step", ylab = "lambda estimate",cex = 2, log = "x")
